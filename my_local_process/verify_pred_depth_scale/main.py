import numpy as np
import os.path as osp
import matplotlib.pyplot as plt

file_root = '/media/zeke/project_data/Projects/torch-ngp/outputs/replica_multiroom_stable_depth/vis_eval_rgbonly_preddepth_vs_gt_depth_check'
file_root = '/media/zeke/project_data/Projects/torch-ngp/outputs/replica_multiroom_stable_depth/vis_evalvis_eval_train_depthonly'
file_root = '/media/zeke/project_data/Projects/torch-ngp/outputs/replica_multiroom_stable_depth/vis_eval_rgb_depth'
radial_depth = False # NOTE: if gt is generated by radial depth, set this to False

for i in range(7):
    if i not in [0, 3, 4, 5]:
        continue

    pred_file = f'0_{i}_depth_.npy'
    gt_file = f'0_{i}_depth__gt.npy'
    pred_file = f'70000_{i}_depth_.npy'
    gt_file = f'70000_{i}_depth__gt.npy'

    pred_depth = np.load(osp.join(file_root, pred_file))
    gt_depth = np.load(osp.join(file_root, gt_file))
    print(gt_depth.shape)
    if radial_depth:
        f = 320
        cx = 320
        cy = 240
        for i in range(gt_depth.shape[1]):
            for j in range(gt_depth.shape[0]):
                gt_depth[j, i] = np.sqrt(f**2 + (i-cx)**2 + (j-cy)**2) * gt_depth[j,i]/f
    
    # for i in range(-20, -10):
    #     datum = gt_depth[:, i]
    #     plt.plot(datum,'r--', label='gt')
    # plt.show()
    # import ipdb;ipdb.set_trace() # breakpoint 30

    amin, amax = np.amin(pred_depth), np.amax(pred_depth)
    bmin, bmax = np.amin(gt_depth), np.amax(gt_depth)
    cmin, cmax = np.amin(pred_depth-gt_depth), np.amax(pred_depth-gt_depth)

    gmin = np.min([amin, bmin, cmin])
    gmax = np.min([amax, bmax, cmax])

    f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 5))
    # ax1.imshow(pred_depth, vmin=gmin, vmax=gmax, aspect='auto', cmap='jet') # cmap='viridis'
    ax1.imshow(pred_depth, aspect='auto', cmap='jet') # cmap='viridis'
    ax1.set_title('pred depth')
    # ax2.imshow(gt_depth, vmin=gmin, vmax=gmax, aspect='auto', cmap='jet')
    ax2.imshow(gt_depth, aspect='auto', cmap='jet')
    ax2.set_title('gt depth')
    im3 = ax3.imshow(pred_depth-gt_depth, vmin=gmin, vmax=gmax, aspect='auto', cmap='jet')
    ax3.set_title('diff')
    f.colorbar(im3)
    plt.tight_layout()
    plt.show()

    print(np.mean(abs(pred_depth-gt_depth)))

    for i in range(-20, -10):
        datum = pred_depth[:, i]
        plt.plot(datum, 'b:', label='pred')

        datum = gt_depth[:, i]
        plt.plot(datum,'r--', label='gt')
    plt.legend(['pred', 'gt'])
    plt.show()

